{"version":3,"sources":["managers/httpManager.js","utility/index.js","components/ContactListComponent.js","components/ConversationComponent.js","App.js","managers/cookieManager.js","modules/login/index.js","index.js"],"names":["API_BASE_URL","createUser","userData","a","axios","post","searchUser","email","get","createChannel","requestData","getChannelList","sendMessage","httpManager","utility","validateEmail","String","toLowerCase","match","Container","styled","div","ProfileInfoDiv","SearchBox","SearchContainer","SearchIcon","img","SearchInput","input","ContactItem","ContactInfo","ContactName","span","MessageText","MessageTime","ProfileImage","ProfileIcon","SearchResults","ContactComponent","props","setChat","userInfo","useState","otherUser","channelUsers","find","userObj","lastMessage","messages","length","onClick","channelData","src","profilePic","name","text","Date","addedOn","getUTCDate","ContactListComponent","refreshContactList","searchString","setSearchString","searchResult","setSearchResult","contactList","setContactList","refreshContacts","contactListData","data","responseData","useEffect","onSearchTextChanged","searchText","success","imageUrl","placeholder","value","onChange","e","target","map","_id","ProfileHeader","ProfileInfo","ChatBox","MessageContainer","MessageDiv","isYours","Message","EmojiImage","ConversationComponent","selectedChat","setText","pickerVisible","togglePicker","messageList","setMessageList","onEnterPress","event","channelId","key","channelResponse","msgReqData","senderEmail","getTime","push","messageData","pickerStyle","position","bottom","onEmojiClick","emoji","onKeyDown","ChatPlaceholder","Placeholder","App","toggleRefreshContactList","cookies","Cookies","cookieManager","setUserInfo","set","JSON","stringify","path","getUserInfo","Header","CardView","Instructions","Heading","QRCode","LoginComponent","responseGoogle","response","profileObj","clientId","buttonText","cookiePolicy","onSuccess","onFailure","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.882a1546.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL = \"http://localhost:3001\";\n\nconst createUser = async (userData) => {\n  return await axios.post(`${API_BASE_URL}/user`, userData);\n};\n\nconst searchUser = async (email) => {\n  return await axios.get(`${API_BASE_URL}/search-user?email=${email}`);\n};\n\nconst createChannel = async (requestData) => {\n  return await axios.post(`${API_BASE_URL}/channel`, requestData);\n};\n\nconst getChannelList = async (email) => {\n  return await axios.get(`${API_BASE_URL}/channel-list?email=${email}`);\n};\n\nconst sendMessage = async (requestData) => {\n  return await axios.post(`${API_BASE_URL}/message`, requestData);\n};\n\nexport const httpManager = {\n  createUser,\n  searchUser,\n  createChannel,\n  getChannelList,\n  sendMessage,\n};\nexport default httpManager;\n","const validateEmail = (email) => {\n  return String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n\nexport const utility = {\n  validateEmail,\n};\nexport default utility;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport httpManager from \"../managers/httpManager\";\nimport { contactList } from \"../mockData\";\nimport utility from \"../utility\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1.6;\n  height: 100%;\n  width: 100%;\n  border-right: 1px solid #dadada;\n`;\n\nconst ProfileInfoDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #ededed;\n  padding: 10px;\n`;\n\nconst SearchBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #f6f6f6;\n  padding: 10px;\n`;\nexport const SearchContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: white;\n  border-radius: 16px;\n  width: 100%;\n  padding: 5px 10px;\n  gap: 10px;\n`;\nconst SearchIcon = styled.img`\n  width: 28px;\n  height: 28px;\n`;\nexport const SearchInput = styled.input`\n  width: 100%;\n  outline: none;\n  border: none;\n  font-size: 15px;\n`;\n\nconst ContactItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  border-bottom: 1px solid #f2f2f2;\n  background: white;\n  cursor: pointer;\n\n  :hover {\n    background: #ebebeb;\n  }\n`;\nconst ContactInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 12px;\n`;\n\nconst ContactName = styled.span`\n  width: 100%;\n  font-size: 16px;\n  color: black;\n`;\n\nconst MessageText = styled.span`\n  width: 100%;\n  font-size: 14px;\n  margin-top: 3px;\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nconst MessageTime = styled.span`\n  font-size: 12px;\n  margin-right: 10px;\n  color: rgba(0, 0, 0, 0.45);\n  white-space: nowrap;\n`;\n\nconst ProfileImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n`;\nconst ProfileIcon = styled(ProfileImage)`\n  width: 38px;\n  height: 38px;\n  border-radius: 50%;\n  margin-left: 12px;\n  margin-top: 15px;\n  margin-bottom: 15px;\n  object-fit: cover;\n`;\nconst SearchResults = styled.div`\n  width: 100%;\n  height: 100px;\n`;\n\nconst ContactComponent = (props) => {\n  const { userData, setChat, userInfo } = props;\n  const [searchResult, setSearchResult] = useState();\n\n  const otherUser =\n    userData.channelUsers?.find(\n      (userObj) => userObj.email !== userInfo.email\n    ) || userData;\n\n  const lastMessage =\n    userData.messages && userData.messages.length\n      ? userData.messages[userData.messages.length - 1]\n      : {};\n\n  return (\n    <ContactItem onClick={() => setChat({ channelData: userData, otherUser })}>\n      <ProfileIcon src={otherUser?.profilePic} />\n      <ContactInfo>\n        <ContactName>{otherUser?.name}</ContactName>\n        <MessageText>{lastMessage?.text}</MessageText>\n      </ContactInfo>\n      <MessageTime>\n        {\" \"}\n        {lastMessage && new Date(lastMessage?.addedOn).getUTCDate()}\n      </MessageTime>\n    </ContactItem>\n  );\n};\n\nfunction ContactListComponent(props) {\n  const { userInfo, refreshContactList } = props;\n  const [searchString, setSearchString] = useState(\"\");\n  const [searchResult, setSearchResult] = useState(\"\");\n  const [contactList, setContactList] = useState([]);\n\n  const refreshContacts = async () => {\n    const contactListData = await httpManager.getChannelList(userInfo.email);\n    setContactList(contactListData.data.responseData);\n    setSearchString();\n    setSearchResult();\n  };\n\n  useEffect(() => {\n    refreshContacts();\n  }, [refreshContactList]);\n\n  const onSearchTextChanged = async (searchText) => {\n    setSearchString(searchText);\n    if (!utility.validateEmail(searchText)) return;\n\n    const userData = await httpManager.searchUser(searchText);\n    if (userData.data?.success) setSearchResult(userData.data.responseData);\n  };\n\n  return (\n    <Container>\n      <ProfileInfoDiv>\n        <ProfileImage\n          src={userInfo.imageUrl || \"/whatsapp-clone/profile/theindiandev.jpeg\"}\n        />\n      </ProfileInfoDiv>\n      <SearchBox>\n        <SearchContainer>\n          <SearchIcon src={\"/whatsapp-clone/search-icon.svg\"} />\n          <SearchInput\n            placeholder=\"Search or start new chat\"\n            value={searchString}\n            onChange={(e) => onSearchTextChanged(e.target.value)}\n          />\n        </SearchContainer>\n      </SearchBox>\n      {searchResult && (\n        <SearchResults>\n          <ContactComponent userData={searchResult} setChat={props.setChat} />\n        </SearchResults>\n      )}\n      {contactList.map((userData) => (\n        <ContactComponent\n          key={userData._id}\n          userData={userData}\n          setChat={props.setChat}\n          userInfo={userInfo}\n        />\n      ))}\n    </Container>\n  );\n}\n\nexport default ContactListComponent;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { SearchContainer, SearchInput } from \"./ContactListComponent\";\nimport Picker from \"emoji-picker-react\";\nimport httpManager from \"../managers/httpManager\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 3;\n  height: 100%;\n  width: 100%;\n  background: #f6f7f8;\n`;\n\nconst ProfileHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #ededed;\n  padding: 10px;\n  align-items: center;\n`;\n\nconst ProfileInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #ededed;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst ProfileImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n`;\nconst ContactName = styled.span`\n  font-size: 16px;\n  color: black;\n`;\n\nconst ChatBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #f0f0f0;\n  padding: 10px;\n  align-items: center;\n  bottom: 0;\n`;\nconst MessageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow-y: auto;\n  background: #e5ddd6;\n`;\nconst MessageDiv = styled.div`\n  display: flex;\n  justify-content: ${(props) => (props.isYours ? \"flex-end\" : \"flex-start\")};\n  margin: 5px 15px;\n`;\nconst Message = styled.div`\n  background: ${(props) => (props.isYours ? \"#daf8cb\" : \"white\")};\n  padding: 8px 10px;\n  border-radius: 4px;\n  max-width: 50%;\n  color: #303030;\n  font-size: 14px;\n`;\nconst EmojiImage = styled.img`\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  opacity: 0.4;\n  cursor: pointer;\n`;\nfunction ConversationComponent(props) {\n  const { selectedChat, userInfo, refreshContactList } = props;\n  const [text, setText] = useState(\"\");\n  const [pickerVisible, togglePicker] = useState(false);\n  const [messageList, setMessageList] = useState([]);\n\n  useEffect(() => {\n    setMessageList(selectedChat.channelData.messages);\n  }, [selectedChat]);\n\n  const onEnterPress = async (event) => {\n    let channelId = selectedChat.channelData._id;\n    if (event.key === \"Enter\") {\n      if (!messageList || !messageList.length) {\n        const channelUsers = [\n          {\n            email: userInfo.email,\n            name: userInfo.name,\n            profilePic: userInfo.imageUrl,\n          },\n          {\n            email: selectedChat.otherUser.email,\n            name: selectedChat.otherUser.name,\n            profilePic: selectedChat.otherUser.profilePic,\n          },\n        ];\n        const channelResponse = await httpManager.createChannel({\n          channelUsers,\n        });\n        channelId = channelResponse.data.responseData._id;\n      }\n      refreshContactList();\n      const messages = [...messageList];\n      const msgReqData = {\n        text,\n        senderEmail: userInfo.email,\n        addedOn: new Date().getTime(),\n      };\n      await httpManager.sendMessage({\n        channelId,\n        messages: msgReqData,\n      });\n      messages.push(msgReqData);\n      setMessageList(messages);\n      setText(\"\");\n    }\n  };\n  return (\n    <Container>\n      <ProfileHeader>\n        <ProfileInfo>\n          <ProfileImage src={selectedChat.otherUser.profilePic} />\n          <ContactName>{selectedChat.otherUser.name}</ContactName>\n        </ProfileInfo>\n      </ProfileHeader>\n      <MessageContainer>\n        {messageList?.map((messageData) => (\n          <MessageDiv isYours={messageData.senderEmail === userInfo.email}>\n            <Message isYours={messageData.senderEmail === userInfo.email}>\n              {[messageData.text]}\n            </Message>\n          </MessageDiv>\n        ))}\n      </MessageContainer>\n\n      <ChatBox>\n        <SearchContainer>\n          {pickerVisible && (\n            <Picker\n              pickerStyle={{ position: \"absolute\", bottom: \"60px\" }}\n              onEmojiClick={(e, emoji) => {\n                setText(text + emoji.emoji);\n                togglePicker(false);\n              }}\n            />\n          )}\n          <EmojiImage\n            src={\"/whatsapp-clone/data.svg\"}\n            onClick={() => togglePicker((pickerVisible) => !pickerVisible)}\n          />\n          <SearchInput\n            placeholder=\"Type a message\"\n            value={text}\n            onKeyDown={onEnterPress}\n            onChange={(e) => setText(e.target.value)}\n          />\n        </SearchContainer>\n      </ChatBox>\n    </Container>\n  );\n}\n\nexport default ConversationComponent;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ContactListComponent from \"./components/ContactListComponent\";\nimport ConversationComponent from \"./components/ConversationComponent\";\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100%;\n  flex-direction: row;\n  align-items: center;\n  background: #f8f9fb;\n`;\n\nconst ChatPlaceholder = styled.img`\n  width: 240px;\n  height: 240px;\n  border-radius: 50%;\n  object-fit: contain;\n`;\nconst Placeholder = styled.div`\n  flex: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  gap: 10px;\n  color: rgba(0, 0, 0, 0.45);\n\n  span {\n    font-size: 32px;\n    color: #525252;\n  }\n`;\n\nfunction App(props) {\n  const { userInfo } = props;\n  const [selectedChat, setChat] = useState();\n  const [refreshContactList, toggleRefreshContactList] = useState(false);\n\n  return (\n    <Container>\n      <ContactListComponent\n        setChat={setChat}\n        userInfo={userInfo}\n        refreshContactList={refreshContactList}\n      />\n      {selectedChat ? (\n        <ConversationComponent\n          selectedChat={selectedChat}\n          userInfo={userInfo}\n          refreshContactList={() =>\n            toggleRefreshContactList(!refreshContactList)\n          }\n        />\n      ) : (\n        <Placeholder>\n          <ChatPlaceholder src=\"/whatsapp-clone/welcome-placeholder.jpeg\" />\n          <span>Keep your phone connected</span>\n          WhatsApp connects to your phone to sync messages.\n        </Placeholder>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import Cookies from \"universal-cookie\";\n\nconst cookies = new Cookies();\n\nconst setUserInfo = (userInfo) => {\n  cookies.set(\"userInfo\", JSON.stringify(userInfo), { path: \"/\" });\n};\n\nconst getUserInfo = () => {\n  return cookies.get(\"userInfo\");\n};\n\nexport const cookieManager = {\n  setUserInfo,\n  getUserInfo,\n};\nexport default cookieManager;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { GoogleLogin } from \"react-google-login\";\nimport App from \"../../App\";\nimport cookieManager from \"../../managers/cookieManager\";\nimport httpManager from \"../../managers/httpManager\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: #0a0e11;\n  height: 100vh;\n`;\n\nconst Header = styled.div`\n  color: white;\n  width: 100%;\n  font-weight: bold;\n  background-color: #56bca6;\n  padding: 50px 50px 140px;\n  font-size: 14px;\n`;\nconst CardView = styled.div`\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  padding: 30px 50px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: -80px;\n  background-color: white;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  gap: 40px;\n  flex-wrap: wrap;\n`;\n\nconst Instructions = styled.div`\n  padding: 20px;\n  font-size: 16px;\n\n  ol {\n    margin: 40px 0;\n  }\n\n  li {\n    margin: 15px 0;\n  }\n`;\n\nconst Heading = styled.span`\n  font-size: 24px;\n  color: #525252;\n`;\n\nconst QRCode = styled.img`\n  width: 264px;\n  height: 264px;\n  background-color: white;\n`;\n\nconst LoginComponent = () => {\n  const [userInfo, setUserInfo] = useState();\n\n  useEffect(() => {\n    const userData = cookieManager.getUserInfo();\n    if (userData) setUserInfo(userData);\n  }, []);\n\n  const responseGoogle = async (response) => {\n    await httpManager.createUser({\n      email: response.profileObj.email,\n      name: response.profileObj.name,\n      profilePic: response.profileObj.imageUrl,\n    });\n    setUserInfo(response.profileObj);\n    cookieManager.setUserInfo(response.profileObj);\n  };\n\n  return (\n    <>\n      {userInfo ? (\n        <App userInfo={userInfo} />\n      ) : (\n        <Container>\n          <Header>WHATSAPP WEB CLONE</Header>\n          <CardView>\n            <Instructions>\n              <Heading>To use WhatsApp on your computer:</Heading>\n              <ol>\n                <li>You need to Signin using your Google Account.</li>\n                <li>You can anytime logout from the Web.</li>\n                <li>\n                  Click on Signin button to continue using the Whatsapp Clone.\n                </li>\n              </ol>\n              <GoogleLogin\n                clientId=\"412954107899-68euuaorrd8rvs138sa74g0fhudesc2f.apps.googleusercontent.com\"\n                buttonText=\"Sign In with Google\"\n                cookiePolicy={\"single_host_origin\"}\n                onSuccess={responseGoogle}\n                onFailure={responseGoogle}\n              />\n            </Instructions>\n            <QRCode src=\"whatsapp-clone/qr-placeholder.png\" />\n          </CardView>\n        </Container>\n      )}\n    </>\n  );\n};\nexport default LoginComponent;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport LoginComponent from \"./modules/login\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <LoginComponent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}